{
  "swagger": "2.0",
  "info": {
    "description": "TEST The SpatioTemporal Asset Catalog specification aims to standardize the way geospatial assets are exposed online and queried.  A 'spatiotemporal asset' is any file that represents information about the earth captured in a certain space and time. Most of the initial  use cases are related to imagery, but the api is designed to enable search of any spatiotemporal data items. SpatioTemporal Asset Catalogs  can be completely static, implemented as flat files on the web that can be crawled. This API has the same responses as a static catalog, but also offers querying capabilities in addition to exposing data online. This API was inspired by  WFS 3.0, and the goal is to make it compatible with that specification.\n\nWARNING - THIS IS WORK IN PROGRESS. Implementations are encouraged, but please give feedback on github.\nTODO - Update responses to be in line with static catalogs, give example\nTODO - Add in schema responses\nTODO - Explain extensibility, how to return different content & operations\nTODO - Add the querying capabilities",
    "version": "0.0.3",
    "title": "An API for SpatioTemporal Asset Catalogs",
    "contact": {
      "name": "STAC Spec Contributors",
      "url": "https:\/\/github.com\/radiantearth\/stac-spec\/",
      "email": "stac-spec@googlegroups.com"
    },
    "license": {
      "name": "CC-BY 4.0 license",
      "url": "https:\/\/creativecommons.org\/licenses\/by\/4.0\/"
    }
  },
  "host": "geocatalogo.kralidis.ca",
  "basePath": "\/landsat-aws\/stac",
  "tags": [
    {
      "name": "Capabilities",
      "description": "Essential characteristics of this API including information about the data."
    },
    {
      "name": "Items",
      "description": "Access to data (items)."
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "\/api": {
      "get": {
        "tags": [
          "Capabilities"
        ],
        "summary": "the API description - this document",
        "operationId": "getApiDescription",
        "produces": [
          "application\/json"
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "The formal documentation of this API according to the OpenAPI specification, version 3.0. I.e., this document.",
            "schema": {
              "type": "object",
              "properties": {
                
              }
            }
          },
          "default": {
            "description": "An error occured.",
            "schema": {
              "$ref": "#\/definitions\/exception"
            }
          }
        },
        "x-swagger-router-controller": "Capabilities"
      }
    },
    "\/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Retrieve STAC compliant Items matching filters",
        "description": "Returns a pageable GeoJSON feature collection of the Items matching the query",
        "operationId": "getItems",
        "produces": [
          "application\/geo+json"
        ],
        "parameters": [
          {
            "name": "bbox",
            "in": "query",
            "description": "Only items that have a geometry that intersects the bounding box are selected. The bounding box is provided as four numbers, in longitude & latitude:\n* West, South, East, North",
            "required": false,
            "type": "array",
            "items": {
              "type": "number",
              "minimum": -180,
              "maximum": 180
            },
            "collectionFormat": "csv"
          },
          {
            "name": "time",
            "in": "query",
            "description": "An array of date-time strings that adheres to RFC3339 (for example 1985-04-12T23:20:50.52Z). One date-time in the array is the time to match. Two date-times represent a range. Any additional items in the array will be ignored.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A placeholder for a future filter implementation. The queryl language is still to be determined.",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum number or results retruned by the API",
            "required": false,
            "type": "integer"
          },
          {
            "name": "next",
            "in": "query",
            "description": "Token for the next set of paginated data.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Description here",
            "schema": {
              "$ref": "#\/definitions\/ItemCollection"
            }
          },
          "default": {
            "description": "An error occured.",
            "schema": {
              "$ref": "#\/definitions\/exception"
            }
          }
        },
        "x-swagger-router-controller": "Items"
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Retrieve items matching filters. The request is a string that matches the GET query exactly. POST is primarily to be used when the request length exceeds GET maximums (which is not uncommon with geospatial queries)",
        "operationId": "getItemsPost",
        "produces": [
          "application\/geo+json"
        ],
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Returns a pageable GeoJSON feature collection of the items matching the query",
            "schema": {
              "$ref": "#\/definitions\/ItemCollection"
            }
          },
          "default": {
            "description": "An error occured.",
            "schema": {
              "$ref": "#\/definitions\/exception"
            }
          }
        },
        "x-swagger-router-controller": "Items"
      }
    },
    "\/items\/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Retreive item by id",
        "operationId": "getItem",
        "produces": [
          "application\/geo+json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of an item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An item.",
            "schema": {
              "$ref": "#\/definitions\/Item"
            }
          },
          "404": {
            "description": "The item with id {id} does not exist.",
            "schema": {
              "$ref": "#\/definitions\/exception"
            }
          },
          "default": {
            "description": "An error occured.",
            "schema": {
              "$ref": "#\/definitions\/exception"
            }
          }
        },
        "x-swagger-router-controller": "Items"
      }
    }
  },
  "definitions": {
    "exception": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "bbox": {
      "type": "array",
      "description": "West, South, East, North",
      "items": {
        "type": "number",
        "minimum": -180,
        "maximum": 180
      },
      "example": [
        -180,
        -90,
        180,
        90
      ]
    },
    "link": {
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string",
          "example": "prev"
        },
        "type": {
          "type": "string",
          "example": "application\/geo+json"
        },
        "hreflang": {
          "type": "string",
          "example": "en"
        }
      }
    },
    "ItemCollection": {
      "type": "object",
      "required": [
        "features",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "FeatureCollection"
          ]
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#\/definitions\/Item"
          }
        },
        "nextPageToken": {
          "type": "string",
          "example": "ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk",
          "description": "A token to obtain the next paginated data set"
        },
        "links": {
          "$ref": "#\/definitions\/ItemCollectionLinks"
        }
      }
    },
    "Item": {
      "type": "object",
      "required": [
        "geometry",
        "id",
        "links",
        "properties",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "path\/to\/example.tif",
          "description": "unique ID, potentially link to file"
        },
        "bbox": {
          "$ref": "#\/definitions\/bbox"
        },
        "geometry": {
          "type": "object",
          "description": "footprint of the item",
          "properties": {
            
          }
        },
        "type": {
          "type": "string",
          "description": "The GeoJSON type",
          "enum": [
            "Item"
          ]
        },
        "properties": {
          "$ref": "#\/definitions\/ItemProperties"
        },
        "links": {
          "$ref": "#\/definitions\/ItemLinks"
        }
      },
      "example": {
        "type": "Feature",
        "id": "CS3-20160503_132130_04",
        "bbox": [
          -122.59750209,
          37.48803556,
          -122.2880486,
          37.613537207
        ],
        "geometry": {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -122.308150179,
                37.488035566
              ],
              [
                -122.597502109,
                37.538869539
              ],
              [
                -122.576687533,
                37.613537207
              ],
              [
                -122.2880486,
                37.562818007
              ],
              [
                -122.308150179,
                37.488035566
              ]
            ]
          ]
        },
        "properties": {
          "start": "2016-05-03T13:21:30.040Z",
          "end": "2016-05-03T13:21:30.410Z",
          "provider": "http:\/\/www.cool-sat.com",
          "license": "CC-BY-4.0"
        },
        "links": [
          {
            "rel": "self",
            "href": "http:\/\/cool-sat.com\/catalog\/CS3-20160503_132130_04\/CS3-20160503_132130_04.json"
          },
          {
            "rel": "thumbnail",
            "href": "http:\/\/cool-sat.com\/catalog\/CS3-20160503_132130_04\/thumbnail.png"
          }
        ],
        "assets": [
          {
            "href": "relative-path\/to\/analytic.tif",
            "name": "4-Band Analytic"
          }
        ]
      }
    },
    "ItemProperties": {
      "type": "object",
      "required": [
        "end_date",
        "start_date"
      ],
      "properties": {
        "start_date": {
          "$ref": "#\/definitions\/Time"
        },
        "end_date": {
          "$ref": "#\/definitions\/Time"
        },
        "provider": {
          "type": "string",
          "description": "Information about the provider"
        },
        "license": {
          "type": "string",
          "description": "Data license name based on SPDX License List"
        }
      },
      "description": "provides the core metatdata fields plus extensions",
      "additionalProperties": {
        "type": "object",
        "properties": {
          
        }
      }
    },
    "ItemLinks": {
      "type": "object",
      "required": [
        "self",
        "thumbnail"
      ],
      "properties": {
        "self": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        }
      }
    },
    "ItemCollectionLinks": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string",
          "format": "url",
          "example": "http:\/\/api.cool-sat.com\/query\/gasd312fsaeg\/ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk",
          "description": "A URL to obtain the next paginated data set. If not present, the client should utilize the `nextPageToken`."
        }
      }
    },
    "Time": {
      "type": "string",
      "description": "A single date-time string that adheres to RFC3339, for example 1985-04-12T23:20:50.52Z"
    },
    "StringSet": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Int64Set": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "int64"
      }
    },
    "TimeRange": {
      "properties": {
        "begin": {
          "type": "string"
        },
        "end": {
          "type": "string"
        }
      },
      "description": "begin and end timestamps adhering to RFC3339"
    },
    "Int64Range": {
      "properties": {
        "begin": {
          "type": "integer",
          "format": "int64"
        },
        "end": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "An integer range with begin and end"
    },
    "DoubleRange": {
      "properties": {
        "begin": {
          "type": "number",
          "format": "double"
        },
        "end": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "A double range with begin and end"
    },
    "Doc": {
      "type": "object",
      "description": "Arbitrary json document",
      "additionalProperties": {
        "type": "object",
        "properties": {
          
        }
      }
    },
    "GeoJson": {
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "$ref": "#\/definitions\/ItemType"
        }
      },
      "description": "root geojson object"
    },
    "ItemType": {
      "type": "string",
      "enum": [
        "Point",
        "MultiPoint",
        "LineString",
        "MultiLineString",
        "Polygon",
        "MultiPolygon",
        "GeometryCollection",
        "Item",
        "ItemCollection"
      ]
    },
    "GeometryCollection": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "geometries"
          ],
          "properties": {
            "geometries": {
              "$ref": "#\/definitions\/GeometryCollection2D"
            }
          }
        }
      ]
    },
    "MultiPolygon": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "coordinates"
          ],
          "properties": {
            "coordinates": {
              "$ref": "#\/definitions\/MultiPolygon2D"
            }
          }
        }
      ]
    },
    "MultiLineString": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "coordinates"
          ],
          "properties": {
            "coordinates": {
              "$ref": "#\/definitions\/MultiLineString2D"
            }
          }
        }
      ]
    },
    "MultiPoint": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "coordinates"
          ],
          "properties": {
            "coordinates": {
              "$ref": "#\/definitions\/MultiPoint2D"
            }
          }
        }
      ]
    },
    "Polygon": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "coordinates"
          ],
          "properties": {
            "coordinates": {
              "$ref": "#\/definitions\/Polygon2D"
            }
          }
        }
      ]
    },
    "LineString": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "coordinates"
          ],
          "properties": {
            "coordinates": {
              "$ref": "#\/definitions\/LineString2D"
            }
          }
        }
      ]
    },
    "Point": {
      "allOf": [
        {
          "$ref": "#\/definitions\/GeoJson"
        },
        {
          "type": "object",
          "required": [
            "coordinates"
          ],
          "properties": {
            "coordinates": {
              "$ref": "#\/definitions\/Point2D"
            }
          }
        }
      ]
    },
    "GeoPolygon2D": {
      "type": "object",
      "required": [
        "coordinates",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of geometry",
          "enum": [
            "Polygon"
          ]
        },
        "coordinates": {
          "$ref": "#\/definitions\/Polygon2D"
        }
      },
      "description": "A geojson 2d polygon"
    },
    "GeometryCollection2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/GeoJson"
      }
    },
    "MultiPolygon2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/Polygon2D"
      }
    },
    "Polygon2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/LinearRing2D"
      },
      "minItems": 1
    },
    "MultiLineString2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/LineString2D"
      }
    },
    "LinearRing2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/Point2D"
      },
      "minItems": 4
    },
    "LineString2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/Point2D"
      },
      "minItems": 2
    },
    "MultiPoint2D": {
      "type": "array",
      "items": {
        "$ref": "#\/definitions\/Point2D"
      },
      "minItems": 2
    },
    "Point2D": {
      "type": "array",
      "description": "A 2d geojson point",
      "items": {
        "type": "number",
        "format": "double"
      }
    }
  },
  "parameters": {
    "next": {
      "name": "next",
      "in": "query",
      "description": "Token for the next set of paginated data.",
      "required": false,
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "Defines the maximum number or results retruned by the API",
      "required": false,
      "type": "integer"
    },
    "time": {
      "name": "time",
      "in": "query",
      "description": "An array of date-time strings that adheres to RFC3339 (for example 1985-04-12T23:20:50.52Z). One date-time in the array is the time to match. Two date-times represent a range. Any additional items in the array will be ignored.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv"
    },
    "bbox": {
      "name": "bbox",
      "in": "query",
      "description": "Only items that have a geometry that intersects the bounding box are selected. The bounding box is provided as four numbers, in longitude & latitude:\n* West, South, East, North",
      "required": false,
      "type": "array",
      "items": {
        "type": "number",
        "minimum": -180,
        "maximum": 180
      },
      "collectionFormat": "csv"
    },
    "filter": {
      "name": "filter",
      "in": "query",
      "description": "A placeholder for a future filter implementation. The queryl language is still to be determined.",
      "required": false,
      "type": "string"
    },
    "id": {
      "name": "id",
      "in": "path",
      "description": "The id of an item",
      "required": true,
      "type": "string"
    }
  }
}
